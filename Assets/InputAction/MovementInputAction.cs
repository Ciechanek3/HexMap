//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputAction/MovementInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementInputAction"",
    ""maps"": [
        {
            ""name"": ""movement"",
            ""id"": ""24c42d8e-9197-4534-bbc6-49794c6e31a0"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""3059c5a2-e0fd-4af4-b1f6-98ab380c7281"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightMouseButtonClicked"",
                    ""type"": ""Value"",
                    ""id"": ""e329b39a-5aa4-423e-851d-2f80dbb0cfe5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65b2f4ea-f710-4706-83fc-1e5f921ae40e"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4681fdd9-a667-4279-a36a-7e2d806d468d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMouseButtonClicked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movement
        m_movement = asset.FindActionMap("movement", throwIfNotFound: true);
        m_movement_Look = m_movement.FindAction("Look", throwIfNotFound: true);
        m_movement_RightMouseButtonClicked = m_movement.FindAction("RightMouseButtonClicked", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement
    private readonly InputActionMap m_movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_movement_Look;
    private readonly InputAction m_movement_RightMouseButtonClicked;
    public struct MovementActions
    {
        private @MovementInputAction m_Wrapper;
        public MovementActions(@MovementInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_movement_Look;
        public InputAction @RightMouseButtonClicked => m_Wrapper.m_movement_RightMouseButtonClicked;
        public InputActionMap Get() { return m_Wrapper.m_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @RightMouseButtonClicked.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRightMouseButtonClicked;
                @RightMouseButtonClicked.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRightMouseButtonClicked;
                @RightMouseButtonClicked.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRightMouseButtonClicked;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @RightMouseButtonClicked.started += instance.OnRightMouseButtonClicked;
                @RightMouseButtonClicked.performed += instance.OnRightMouseButtonClicked;
                @RightMouseButtonClicked.canceled += instance.OnRightMouseButtonClicked;
            }
        }
    }
    public MovementActions @movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnRightMouseButtonClicked(InputAction.CallbackContext context);
    }
}
